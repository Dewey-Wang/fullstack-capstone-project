name: Deploy to AWS

on:
  push:
    branches:
      - main  # 當 push 到 main 分支時觸發部署


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: 🔧 更新 `/giftlink-frontend/src/components/MainPage/MainPage.js`
        run: |
          cat <<EOF > /giftlink-frontend/src/components/MainPage/MainPage.js
          import React, { useState, useEffect } from 'react';
          import { useNavigate } from 'react-router-dom';
          import {urlConfig} from '../../config';
          
          function MainPage() {
              const [gifts, setGifts] = useState([]);
              const navigate = useNavigate();
          
              useEffect(() => {
                  // Task 1: Write async fetch operation
                  // fetch all gifts
                  const fetchGifts = async () => {
                      try {
                          let url = `${urlConfig.backendUrl}/api/gifts`
                          const response = await fetch(url);
                          if (!response.ok) {
                              //something went wrong
                              throw new Error(`HTTP error; ${response.status}`)
                          }
                          const data = await response.json();
                          setGifts(data);
                      } catch (error) {
                          console.log('Fetch error: ' + error.message);
                      }
                  };
          
                  fetchGifts();
              }, []);
          
              // Task 2: Navigate to details page
              const goToDetailsPage = (productId) => {
                  navigate(`/app/product/${productId}`);
                };
          
              // Task 3: Format timestamp
              const formatDate = (timestamp) => {
                  const date = new Date(timestamp * 1000);
                  return date.toLocaleString('default', { month: 'long', day: 'numeric', year: 'numeric' });
                };
          
              const getConditionClass = (condition) => {
                  return condition === "New" ? "list-group-item-success" : "list-group-item-warning";
              };
          
              return (
                  <div className="container mt-5">
                      <div className="row">
                          {gifts.map((gift) => (
                              <div key={gift.id} className="col-md-4 mb-4">
                                  <div className="card product-card">
          
                                      {/* // Task 4: Display gift image or placeholder */}
                                      {/* // Write your code below this line */}
                                          <div className="image-placeholder">
                                              {gift.image ? (
                                                  <img src={gift.image} alt={gift.name} />
                                              ) : (
                                                  <div className="no-image-available">No Image Available</div>
                                              )}
                                          </div>
                                      <div className="card-body">
          
                                          {/* // Task 5: Display gift image or placeholder */}
                                          {/* // Write your code below this line */}
                                          <h5 className="card-title">{gift.name}</h5>
                                          <p className={`card-text ${getConditionClass(gift.condition)}`}>
                                          {gift.condition}
                                          </p>
          
                                          {/* // Task 6: Display gift image or placeholder */}
                                          {/* // Write your code below this line */}
                                          <p className="card-text date-added">
                                                  {formatDate(gift.date_added)}
                                          </p>
                                      </div>
                                      <div className="card-footer">
                                          <button onClick={() => goToDetailsPage(gift.id)} className="btn btn-primary">
                                              View Details
                                          </button>
                                      </div>
                                  </div>
                              </div>
                          ))}
                      </div>
                  </div>
              );
          }
          
          export default MainPage;
          EOF
      - name: 🛠 安裝 eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version  # 確認 eksctl 安裝成功

      - name: 🐳 登入 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: ⚙️ 檢查並建立 AWS EKS 叢集
        run: |
          eksctl get cluster --name giftapp-cluster || eksctl create cluster --name giftapp-cluster --region ${{ secrets.AWS_REGION }} --nodegroup-name giftapp-nodes --node-type t3.medium --nodes 2

      - name: 🔧 設定 Kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name giftapp-cluster

      - name: 🏗️ 建立 ecr-access ServiceAccount 並綁定 IAM
        run: |
          eksctl create iamserviceaccount \
            --name ecr-access \
            --namespace default \
            --cluster giftapp-cluster \
            --attach-policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --override-existing-serviceaccounts \
            --approve

          echo "✅ ServiceAccount ecr-access 已建立！"

      - name: ⬆️ 部署 MongoDB 到 AWS EKS
        run: |
          kubectl apply -f ./kubernetes/deploymongo.yml
          
          echo "⌛ 等待 MongoDB 部署完成..."

          echo "🔍 檢查 MongoDB Pods 狀態..."
          kubectl get pods

          # 取得 MongoDB Pod 的狀態
          POD_STATUS=$(kubectl get pods -l app=mongodb -o jsonpath='{.items[0].status.phase}')
          
          if [ "$POD_STATUS" != "Running" ]; then
            echo "❌ MongoDB Pod 未能成功啟動，當前狀態: $POD_STATUS"
            kubectl describe pod -l app=mongodb  # 顯示詳細錯誤資訊
            exit 1  # 讓 GitHub Actions 失敗，防止繼續執行
          fi

          echo "✅ MongoDB 已成功運行！"

      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR (linux/amd64)
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest --push ./giftlink-backend

      - name: 📦 安裝 Express 和 CORS 在 giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors
          cd ..

      - name: 🔧 更新 `deployment.yml` 中的 Image 路徑
        run: |
          ECR_URL="${{ secrets.ECR_REPO }}"
          sed -i "s|<ECR_URL>|$ECR_URL|g" ./kubernetes/deployment.yml
          cat ./kubernetes/deployment.yml  # 確保內容已更新
      
      - name: 🏗️ 創建 AWS ECR Secret，供 Kubernetes 拉取映像
        run: |
          kubectl delete secret aws-ecr-secret --ignore-not-found
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ secrets.ECR_REPO }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ AWS ECR Secret 已建立！"

      - name: ⬆️ 部署 Backend 到 AWS EKS
        run: |
          kubectl delete deployment giftapp
          kubectl apply -f ./kubernetes/deployment.yml
          kubectl get pods -o wide
          kubectl get nodes -o wide

      - name: 🛠️ 檢查並修復 Kubernetes 節點狀態
        run: |
          echo "🔍 檢查 Kubernetes 節點狀態..."
          kubectl get nodes -o wide

          # 找出 NotReady 或 SchedulingDisabled 的節點
          BAD_NODES=$(kubectl get nodes --no-headers | awk '$2 ~ /NotReady|SchedulingDisabled/ {print $1}')

          if [ -n "$BAD_NODES" ]; then
            echo "⚠️ 以下節點處於 NotReady 或 SchedulingDisabled 狀態:"
            echo "$BAD_NODES"

            for NODE in $BAD_NODES; do
              echo "🛠️ 修復節點: $NODE"
              
              # 顯示節點詳細資訊
              kubectl describe node "$NODE"

              # 移除 taints 讓 Pod 可以調度
              kubectl taint nodes "$NODE" node.kubernetes.io/not-ready:NoExecute- || true
              kubectl taint nodes "$NODE" node.kubernetes.io/unreachable:NoExecute- || true
              kubectl uncordon "$NODE" || true
            done

            echo "⏳ 等待節點恢復 Ready 狀態..."
            sleep 30
            kubectl get nodes -o wide
          else
            echo "✅ 所有節點均正常"
          fi


      - name: 🏗️ 等待 giftapp 部署完成
        run: |
          echo "⌛ 等待 giftapp 部署完成..."
          kubectl rollout status deployment giftapp --timeout=120s || (echo "❌ giftapp 部署失敗，顯示 Pod 狀態：" && kubectl get pods && kubectl describe pod -l app=giftapp && exit 1)

          echo "🔍 檢查 LoadBalancer..."
          BACKEND_URL=$(kubectl get svc gift-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ -z "$BACKEND_URL" ]; then
            echo "❌ LoadBalancer 尚未準備好，請稍後再試"
            kubectl get svc gift-app-service
            exit 1
          fi

          BACKEND_URL="http://$BACKEND_URL"
          echo "✅ 服務已啟動，網址為：$BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 giftlink-frontend env
        run: |
          echo "REACT_APP_BACKEND_URL=$BACKEND_URL" > ./giftlink-frontend/.env
          cat giftlink-frontend/.env  # 確認內容是否更新成功
      
      - name: 📦 安裝express and cors in giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors
          cd ..
          
      - name: 📦 安裝所有必要的 packages in giftlink-frontend
        run: |
          cd ./giftlink-frontend
          npm install
          npm run build
          cd ..

      - name: 🏗️ 建立 giftwebsite Docker Image 並推送到 AWS ECR (linux/amd64)
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REPO }}/giftwebsite:latest --push ./giftwebsite
    
      - name: 🔧 更新 `giftwebsite-deployment.yml` 中的 Image 路徑
        run: |
          ECR_URL="${{ secrets.ECR_REPO }}"
          sed -i "s|<ECR_URL>|$ECR_URL|g" ./kubernetes/giftwebsite-deployment.yml
          cat ./kubernetes/giftwebsite-deployment.yml  # 確保內容已更新
      
      - name: ⬆️ 部署 giftwebsite 到 AWS EKS
        run: |
         # 確保 giftwebsite Deployment 存在
          kubectl delete deployment giftwebsite
          kubectl apply -f ./kubernetes/giftwebsite-deployment.yml
          kubectl get pods -o wide
          kubectl get nodes -o wide
          kubectl describe pod -l app=giftwebsite
          kubectl get events --sort-by=.metadata.creationTimestamp

        
      - name: 📢 部署 giftwebsite 並確保 LoadBalancer 生效
        run: |
          kubectl delete secret aws-ecr-secret --ignore-not-found
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ secrets.ECR_REPO }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
            --namespace=default
          
          kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "aws-ecr-secret"}]}'

          # 確保 Deployment 部署成功
          kubectl rollout status deployment giftwebsite --timeout=120s || (echo "❌ giftwebsite 部署失敗" && exit 1)

          # 確保 Service 正確暴露
          kubectl expose deployment giftwebsite --type=LoadBalancer --name=giftwebsite-service --port=80 --target-port=9000 --namespace=default --dry-run=client -o yaml | kubectl apply -f -

          echo "⌛ 等待 LoadBalancer 初始化..."
          sleep 30

          GIFTWEBSITE_URL=$(kubectl get svc giftwebsite-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ -z "$GIFTWEBSITE_URL" ]; then
            echo "❌ LoadBalancer 尚未準備好，請稍後再試"
            kubectl get svc giftwebsite-service
            exit 1
          fi

          echo "✅ 你的 GiftWebsite 可在這裡訪問: http://$GIFTWEBSITE_URL"
          echo "Method_1=http://$GIFTWEBSITE_URL" >> $GITHUB_ENV
      
      - name: 🔄 Reset Unwanted Changes (Keep Only README.md)
        run: |
          # 1️⃣ 還原未提交的修改，但保留 `README.md`
          git restore --staged .
          git restore .

          # 2️⃣ 刪除未追蹤 (Untracked) 的檔案，但不刪除 README.md
          git clean -fd -e README.md

      - name: 🔄 Update README with website Link
        run: |
          echo "🔍 檢查環境變數 Method_1: $Method_1"

          # 確保 $Method_1 變數有值
          if [ -z "$Method_1" ]; then
            echo "❌ ERROR: Method_1 is empty!"
            exit 1
          fi

          # 確保 README.md 存在
          if [ ! -f "README.md" ]; then
            echo "❌ ERROR: README.md does not exist!"
            exit 1
          fi

          # 直接用 echo 確保替換成功
          echo "🔄 Replacing URL in README.md..."
          sed -i "s|🔗Link for Method 1:.*|🔗Link for Method 1: [$Method_1]($Method_1)|" README.md
          
          # 檢查替換後的內容
          cat README.md | grep "🔗Link for Method 1" || echo "❌ ERROR: Replacement failed!"

      - name: 📢 Commit Updated README
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # 只添加 README.md
          git add README.md

          # 檢查是否真的有變更，避免空提交錯誤
          if git diff --cached --quiet; then
            echo "⚠️ No changes to commit in README.md"
            exit 0
          fi

          git commit -m "🔄 Updated README with EKS deployment link"
          git push

          
