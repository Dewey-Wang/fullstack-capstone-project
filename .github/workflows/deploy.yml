name: Deploy to AWS

on:
  push:
    branches:
      - main  # 當 push 到 main 分支時觸發部署

  workflow_run:
    workflows: ["Deploy to AWS"]  # 當這個 workflow 執行完，觸發 AWS_severless.yml
    types:
      - completed


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🛠 安裝 eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version  # 確認 eksctl 安裝成功

      - name: 🐳 登入 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: ⚙️ 檢查並建立 AWS EKS 叢集
        run: |
          eksctl get cluster --name giftapp-cluster || eksctl create cluster --name giftapp-cluster --region ${{ secrets.AWS_REGION }} --nodegroup-name giftapp-nodes --node-type t3.medium --nodes 2

      - name: 🔧 設定 Kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name giftapp-cluster

      - name: 🏗️ 建立 ecr-access ServiceAccount 並綁定 IAM
        run: |
          eksctl create iamserviceaccount \
            --name ecr-access \
            --namespace default \
            --cluster giftapp-cluster \
            --attach-policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --override-existing-serviceaccounts \
            --approve

          echo "✅ ServiceAccount ecr-access 已建立！"

      - name: ⬆️ 部署 MongoDB 到 AWS EKS
        run: |
          kubectl apply -f ./kubernetes/deploymongo.yml
          
          echo "⌛ 等待 MongoDB 部署完成..."

          echo "🔍 檢查 MongoDB Pods 狀態..."
          kubectl get pods

          # 取得 MongoDB Pod 的狀態
          POD_STATUS=$(kubectl get pods -l app=mongodb -o jsonpath='{.items[0].status.phase}')
          
          if [ "$POD_STATUS" != "Running" ]; then
            echo "❌ MongoDB Pod 未能成功啟動，當前狀態: $POD_STATUS"
            kubectl describe pod -l app=mongodb  # 顯示詳細錯誤資訊
            exit 1  # 讓 GitHub Actions 失敗，防止繼續執行
          fi

          echo "✅ MongoDB 已成功運行！"

      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR (linux/amd64)
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest --push ./giftlink-backend

      - name: 📦 安裝 Express 和 CORS 在 giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors
          cd ..

      - name: 🔧 更新 `deployment.yml` 中的 Image 路徑
        run: |
          ECR_URL="${{ secrets.ECR_REPO }}"
          sed -i "s|<ECR_URL>|$ECR_URL|g" ./kubernetes/deployment.yml
          cat ./kubernetes/deployment.yml  # 確保內容已更新
      
      - name: 🏗️ 創建 AWS ECR Secret，供 Kubernetes 拉取映像
        run: |
          kubectl delete secret aws-ecr-secret --ignore-not-found
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ secrets.ECR_REPO }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ AWS ECR Secret 已建立！"

      - name: ⬆️ 部署 Backend 到 AWS EKS
        run: |
          kubectl delete deployment giftapp
          kubectl apply -f ./kubernetes/deployment.yml
          kubectl get pods -o wide
          kubectl get nodes -o wide

      - name: 🛠️ 檢查並修復 Kubernetes 節點狀態
        run: |
          echo "🔍 檢查 Kubernetes 節點狀態..."
          kubectl get nodes -o wide

          # 找出 NotReady 或 SchedulingDisabled 的節點
          BAD_NODES=$(kubectl get nodes --no-headers | awk '$2 ~ /NotReady|SchedulingDisabled/ {print $1}')

          if [ -n "$BAD_NODES" ]; then
            echo "⚠️ 以下節點處於 NotReady 或 SchedulingDisabled 狀態:"
            echo "$BAD_NODES"

            for NODE in $BAD_NODES; do
              echo "🛠️ 修復節點: $NODE"
              
              # 顯示節點詳細資訊
              kubectl describe node "$NODE"

              # 移除 taints 讓 Pod 可以調度
              kubectl taint nodes "$NODE" node.kubernetes.io/not-ready:NoExecute- || true
              kubectl taint nodes "$NODE" node.kubernetes.io/unreachable:NoExecute- || true
              kubectl uncordon "$NODE" || true
            done

            echo "⏳ 等待節點恢復 Ready 狀態..."
            sleep 30
            kubectl get nodes -o wide
          else
            echo "✅ 所有節點均正常"
          fi


      - name: 🏗️ 等待 giftapp 部署完成
        run: |
          echo "⌛ 等待 giftapp 部署完成..."
          kubectl rollout status deployment giftapp --timeout=120s || (echo "❌ giftapp 部署失敗，顯示 Pod 狀態：" && kubectl get pods && kubectl describe pod -l app=giftapp && exit 1)

          echo "🔍 檢查 LoadBalancer..."
          BACKEND_URL=$(kubectl get svc gift-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ -z "$BACKEND_URL" ]; then
            echo "❌ LoadBalancer 尚未準備好，請稍後再試"
            kubectl get svc gift-app-service
            exit 1
          fi

          BACKEND_URL="http://$BACKEND_URL"
          echo "✅ 服務已啟動，網址為：$BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 giftlink-frontend env
        run: |
          echo "REACT_APP_BACKEND_URL=$BACKEND_URL" > ./giftlink-frontend/.env
          cat giftlink-frontend/.env  # 確認內容是否更新成功
      
      - name: 📦 安裝express and cors in giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors
          cd ..
          
      - name: 📦 安裝所有必要的 packages in giftlink-frontend
        run: |
          cd ./giftlink-frontend
          npm install
          npm run build
          cd ..

      - name: 🏗️ 建立 giftwebsite Docker Image 並推送到 AWS ECR (linux/amd64)
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REPO }}/giftwebsite:latest --push ./giftwebsite
    
      - name: 🔧 更新 `giftwebsite-deployment.yml` 中的 Image 路徑
        run: |
          ECR_URL="${{ secrets.ECR_REPO }}"
          sed -i "s|<ECR_URL>|$ECR_URL|g" ./kubernetes/giftwebsite-deployment.yml
          cat ./kubernetes/giftwebsite-deployment.yml  # 確保內容已更新
      
      - name: ⬆️ 部署 giftwebsite 到 AWS EKS
        run: |
         # 確保 giftwebsite Deployment 存在
          kubectl delete deployment giftwebsite
          kubectl apply -f ./kubernetes/giftwebsite-deployment.yml
          kubectl get pods -o wide
          kubectl get nodes -o wide
          kubectl describe pod -l app=giftwebsite
          kubectl get events --sort-by=.metadata.creationTimestamp

        
      - name: 📢 部署 giftwebsite 並確保 LoadBalancer 生效
        run: |
          kubectl delete secret aws-ecr-secret --ignore-not-found
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ secrets.ECR_REPO }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
            --namespace=default
          
          kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "aws-ecr-secret"}]}'

          # 確保 Deployment 部署成功
          kubectl rollout status deployment giftwebsite --timeout=120s || (echo "❌ giftwebsite 部署失敗" && exit 1)

          # 確保 Service 正確暴露
          kubectl expose deployment giftwebsite --type=LoadBalancer --name=giftwebsite-service --port=80 --target-port=9000 --namespace=default --dry-run=client -o yaml | kubectl apply -f -

          echo "⌛ 等待 LoadBalancer 初始化..."
          sleep 30

          GIFTWEBSITE_URL=$(kubectl get svc giftwebsite-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          if [ -z "$GIFTWEBSITE_URL" ]; then
            echo "❌ LoadBalancer 尚未準備好，請稍後再試"
            kubectl get svc giftwebsite-service
            exit 1
          fi

          echo "✅ 你的 GiftWebsite 可在這裡訪問: http://$GIFTWEBSITE_URL"
          Method_1=$(kubectl get svc giftwebsite-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

      - name: 🔄 Stash Uncommitted Changes (Avoid Conflicts)
        run: git stash --include-untracked || echo "No changes to stash"

      - name: 🔄 Pull Latest Changes (Ensure No Conflicts)
        run: |
          git fetch origin main
          git reset --hard origin/main
          git clean -fd  # 確保工作目錄乾淨

      - name: 🔄 Restore Stashed Changes (Except README.md)
        run: git stash pop || echo "No stash found"

      - name: 🔄 Update README with Deployment Links
        run: |
          sed -i "s|🔗Link for Method 1:.*|🔗Link for Method 1: [http://$Method_1](http://$Method_1)|" README.md

      - name: 📢 Commit Updated README
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md  # 只添加 README.md
          git commit -m "🔄 Updated README with EKS deployment link"
          git push origin main
