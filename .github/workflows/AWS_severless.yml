name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 📦 安裝 AWS SDK v3 & dotenv
        run: |
          cd giftlink-backend
          npm uninstall aws-sdk
          npm install @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb dotenv
          cd ..
      - name: 🔧 更新 `util/import-mongo/.env`
        run: |
          cat <<EOF > giftlink-backend/util/import-mongo/.env
          DYNAMODB_TABLE=giftapp-data
          DATASRC=gifts.json
          EOF
      - name: 🔧 確保 `.env` 設置 `DYNAMODB_TABLE`
        run: |
          cat <<EOF > giftlink-backend/.env
          DYNAMODB_TABLE=giftapp-data
          JWT_SECRET=mysecret
          EOF
          
      - name: 🔄 輸出 `.env` 來確認設定
        run: cat giftlink-backend/.env

      - name: 🔧 修正 `index.js` 確保 `.env` 正確載入
        run: |
          cat <<EOF > giftlink-backend/util/import-mongo/index.js
          require("dotenv").config({ path: "giftlink-backend/util/import-mongo/.env" });
          const fs = require("fs");
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, PutCommand } = require("@aws-sdk/lib-dynamodb");
          const TABLE_NAME = process.env.DYNAMODB_TABLE;
          if (!TABLE_NAME) {
              console.error("❌ DYNAMODB_TABLE 未設置，請確認 .env");
              process.exit(1);
          }
          const client = new DynamoDBClient({ region: process.env.AWS_REGION });
          const dynamoDB = DynamoDBDocumentClient.from(client);
          async function loadData() {
              console.log("📥 讀取 `gifts.json`...");
              const giftsFilePath = "giftlink-backend/util/import-mongo/gifts.json";
              const giftsData = JSON.parse(fs.readFileSync(giftsFilePath, "utf8")).docs;
              console.log("🚀 開始寫入 DynamoDB...");
              for (const gift of giftsData) {
                  await dynamoDB.send(new PutCommand({ TableName: TABLE_NAME, Item: gift }));
                  console.log(\`✅ 已寫入: \${gift.name}\`);
              }
              console.log("✅ `gifts.json` 數據已成功導入 DynamoDB！");
          }
          loadData().catch(console.error);
          EOF
      - name: 🔧 更新 `models/db.js`
        run: |
          cat <<EOF > giftlink-backend/models/db.js
          require("dotenv").config();
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");
          
          const client = new DynamoDBClient({
              region: process.env.AWS_REGION,
              credentials: {
                  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
                  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
              },
          });
          
          const db = DynamoDBDocumentClient.from(client);
          const TABLE_NAME = process.env.DYNAMODB_TABLE;
          
          async function getGifts() {
              const params = new ScanCommand({ TableName: TABLE_NAME });
              const data = await db.send(params);
              return data.Items;
          }
          
          async function addGift(gift) {
              const params = new PutCommand({ TableName: TABLE_NAME, Item: gift });
              await db.send(params);
              return gift;
          }
          
          module.exports = { getGifts, addGift };
          EOF
      - name: 🔧 更新 `.env`，移除 MongoDB 並添加 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/.env
          DYNAMODB_TABLE=giftapp-data
          AWS_REGION=${{ secrets.AWS_REGION }}
          JWT_SECRET=mysecret
          EOF
     
      - name: 🔧 更新 `app.js` 來支援 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/app.js
          /*jshint esversion: 8 */
          require("dotenv").config();
          const express = require("express");
          const cors = require("cors");
          const pinoLogger = require("./logger");
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand, PutCommand, QueryCommand } = require("@aws-sdk/lib-dynamodb");
          const bcryptjs = require("bcryptjs");
          const jwt = require("jsonwebtoken");
          
          const app = express();
          app.use(cors());
          app.use(express.json());
          app.use(require("pino-http")({ logger: pinoLogger }));
          
          const port = process.env.PORT || 3060;
          const TABLE_USERS = "giftapp-users";
          const TABLE_GIFTS = "giftapp-gifts";
          
          const client = new DynamoDBClient({ region: process.env.AWS_REGION });
          const db = DynamoDBDocumentClient.from(client);
          
          // ===============================
          // 🏠 API Health Check
          // ===============================
          app.get("/", (req, res) => {
            res.send("Inside the server - Now using DynamoDB!");
          });

                  // ===============================
          // 🔒 Authentication Routes
          // ===============================
          // 📌 User Registration
          app.post("/api/auth/register", async (req, res) => {
            try {
              const { email, firstName, lastName, password } = req.body;

              // 查找用戶是否已存在
              const existingUsers = await db.send(
                new ScanCommand({
                  TableName: TABLE_USERS,
                  FilterExpression: "email = :email",
                  ExpressionAttributeValues: { ":email": email },
                })
              );

              if (existingUsers.Items.length > 0) {
                return res.status(400).json({ error: "Email already exists" });
              }

              // 密碼加密
              const salt = await bcryptjs.genSalt(10);
              const hashedPassword = await bcryptjs.hash(password, salt);
              const userId = `USER-${Date.now()}`;

              await db.send(
                new PutCommand({
                  TableName: TABLE_USERS,
                  Item: {
                    id: userId,
                    email,
                    firstName,
                    lastName,
                    password: hashedPassword,
                    createdAt: new Date().toISOString(),
                  },
                })
              );
                        const authtoken = jwt.sign({ userId }, process.env.JWT_SECRET);
              res.json({ authtoken, email });
            } catch (e) {
              console.error(e);
              res.status(500).json({ error: "Internal Server Error" });
            }
          });


          // 📌 User Login
          app.post("/api/auth/login", async (req, res) => {
            try {
              const { email, password } = req.body;
          
              // 用 `ScanCommand` 找 email
              const users = await db.send(
                new ScanCommand({
                  TableName: TABLE_USERS,
                  FilterExpression: "email = :email",
                  ExpressionAttributeValues: { ":email": email },
                })
              );
          
              if (users.Items.length === 0) {
                return res.status(404).json({ error: "User not found" });
              }
          
              const theUser = users.Items[0];
              const match = await bcryptjs.compare(password, theUser.password);
                  if (!match) {
                return res.status(401).json({ error: "Wrong password" });
              }
          
              const authtoken = jwt.sign({ userId: theUser.id }, process.env.JWT_SECRET);
              res.json({ authtoken, userName: theUser.firstName, userEmail: theUser.email });
            } catch (e) {
              console.error(e);
              res.status(500).json({ error: "Internal Server Error" });
            }
          });

          
          // ===============================
          // 🎁 Gift Routes
          // ===============================
          // 📌 Get all gifts
          app.get("/api/gifts", async (req, res) => {
            try {
              const data = await db.send(new ScanCommand({ TableName: TABLE_GIFTS }));
              res.json(data.Items || []);
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });
          
          // 📌 Add new gift
          app.post("/api/gifts", async (req, res) => {
            try {
              const gift = {
                id: `GIFT-${Date.now()}`,
                ...req.body,
                createdAt: new Date().toISOString(),
              };
          
              await db.send(new PutCommand({ TableName: TABLE_GIFTS, Item: gift }));
              res.json({ message: "Gift added!", gift });
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });
          
          // ===============================
          // 🔎 Search Routes
          // ===============================
          app.get("/api/search", async (req, res) => {
            try {
              let filterExpressions = [];
              let expressionAttributeValues = {};
              let expressionAttributeNames = {};
          
              if (req.query.name) {
                filterExpressions.push("contains(#name, :name)");
                expressionAttributeValues[":name"] = req.query.name;
                expressionAttributeNames["#name"] = "name";
              }
          
              if (req.query.category) {
                filterExpressions.push("category = :category");
                expressionAttributeValues[":category"] = req.query.category;
              }
          
              if (req.query.condition) {
                filterExpressions.push("condition = :condition");
                expressionAttributeValues[":condition"] = req.query.condition;
              }
          
              if (req.query.age_years) {
                filterExpressions.push("age_years <= :age");
                expressionAttributeValues[":age"] = parseInt(req.query.age_years);
              }
             
              const params = {
                TableName: TABLE_GIFTS,
                FilterExpression: filterExpressions.length > 0 ? filterExpressions.join(" AND ") : undefined,
                ExpressionAttributeValues: expressionAttributeValues,
                ExpressionAttributeNames: expressionAttributeNames,
              };
          
              const gifts = await db.send(new ScanCommand(params));
              res.json(gifts.Items || []);
            } catch (e) {
              res.status(500).json({ error: e.message });
            }
          });

          
          // ===============================
          // ⚠️ Error Handling
          // ===============================
          app.use((err, req, res, next) => {
            console.error(err);
            res.status(500).send("Internal Server Error");
          });
          
          app.listen(port, "0.0.0.0", () => {
            console.log(`✅ Server running on port ${port}`);
            console.log(`✅ Using AWS DynamoDB Tables: Users: ${TABLE_USERS}, Gifts: ${TABLE_GIFTS}`);
          });

          EOF
          
      - name: ✅ 確保 AWS DynamoDB Table 存在
        run: |
          TABLE_NAME="giftapp-data"
          EXISTING_TABLE=$(aws dynamodb list-tables --query "TableNames" --output json | grep -w "$TABLE_NAME" || echo "")
          if [ -z "$EXISTING_TABLE" ]; then
            echo "🔄 創建 DynamoDB Table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ secrets.AWS_REGION }}
            echo "✅ DynamoDB Table 創建成功！"
          else
            echo "✅ DynamoDB Table $TABLE_NAME 已存在"
          fi
      - name: 🔄 確保環境變數載入
        run: |
          set -a  # 讓 `export` 變數自動適用
          source giftlink-backend/util/import-mongo/.env
          set +a
      - name: 🔄 透過 Node.js `index.js` 將 `gifts.json` 存入 DynamoDB
        run: |
          node giftlink-backend/util/import-mongo/index.js
      - name: 🔐 登录 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com  
          
      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t 253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest \
            --push ./giftlink-backend
            
      - name: ⏹️ 檢查並更新或創建 giftapp-backend 的 App Runner 服務
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region us-east-1)
          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "None" ]; then
            echo "🚀 `giftapp-backend` 服務不存在，將直接創建新的 App Runner 服務..."
          else
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region us-east-1)
            
            echo "🔍 App Runner 目前狀態: $STATUS"
            
            if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "⚠️ `App Runner` 正在運行，等待完成..."
              while [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; do
                sleep 10
                STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region us-east-1)
              done
            fi
          
            if [ "$STATUS" == "RUNNING" ]; then
              echo "🔄 更新 App Runner 服務..."
              aws apprunner update-service \
                --service-arn "$SERVICE_ARN" \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"3060\",
                      \"RuntimeEnvironmentVariables\": {
                        \"DYNAMODB_TABLE\": \"giftapp-data\",
                        \"AWS_REGION\": \"us-east-1\",
                        \"AWS_ACCESS_KEY_ID\": \"${AWS_ACCESS_KEY_ID}\",
                        \"AWS_SECRET_ACCESS_KEY\": \"${AWS_SECRET_ACCESS_KEY}\"
                      }
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region us-east-1
              exit 0  # 成功更新後，結束腳本
            else
              echo "🛑 服務狀態異常 ($STATUS)，準備刪除並重新創建..."
              aws apprunner delete-service --service-arn "$SERVICE_ARN" --region us-east-1
              echo "🕒 等待 App Runner 服務刪除完成..."
              sleep 20
            fi
          fi
          
          echo "🚀 創建新的 App Runner 服務..."
          aws apprunner create-service \
            --service-name giftapp-backend \
            --source-configuration "{
              \"ImageRepository\": {
                \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest\",
                \"ImageRepositoryType\": \"ECR\",
                \"ImageConfiguration\": {
                  \"Port\": \"3060\",
                  \"RuntimeEnvironmentVariables\": {
                    \"DYNAMODB_TABLE\": \"giftapp-data\",
                    \"AWS_REGION\": \"us-east-1\",
                    \"AWS_ACCESS_KEY_ID\": \"${AWS_ACCESS_KEY_ID}\",
                    \"AWS_SECRET_ACCESS_KEY\": \"${AWS_SECRET_ACCESS_KEY}\"
                  }
                }
              },
              \"AuthenticationConfiguration\": {
                \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
              }
            }" \
            --region us-east-1

          
      - name: 🔧 更新 giftlink-frontend/src/config.js
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$BACKEND_URL" ] || [ "$BACKEND_URL" == "None" ]; then
              echo "❌ 無法取得 Backend URL，部署中止"
              exit 1
          fi

          # **確保 `backendUrl` 使用 HTTPS**
          BACKEND_URL="https://$BACKEND_URL"
          echo "🔍 取得的 Backend URL: $BACKEND_URL"
          echo "REACT_APP_BACKEND_URL=$BACKEND_URL" > giftlink-frontend/.env
          cat giftlink-frontend/.env  # 確保內容更新

          cat <<EOF > giftlink-frontend/src/config.js
          const config = {
            backendUrl: "$BACKEND_URL",
          };
          console.log("🔍 backendUrl in config.js:", config.backendUrl);
          export { config as urlConfig };
          EOF
          cat giftlink-frontend/src/config.js  # 確保內容正確

          echo "✅ Backend URL: $BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV


      - name: 📦 安裝 Express 和 CORS in giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors http-proxy-middleware
          cd ..
          
      - name: 🔍 查看 .env 檔案內容 (完整顯示)
        run: |
          cd ./giftlink-frontend
          npm install
          npm run build
          cd ..
          
      - name: 🛠️ 建立 `giftwebsite/server.js`
        run: |
          cat <<EOF > giftwebsite/server.js
          const express = require("express");
          const path = require("path");
          const { createProxyMiddleware } = require("http-proxy-middleware");

          const app = express();
          const PORT = 9000;
          const BACKEND_URL = process.env.BACKEND_URL;

          if (!BACKEND_URL.startsWith("https://")) {
            console.warn("⚠️ BACKEND_URL 不是 HTTPS，可能導致 Mixed Content 問題");
          }

          // 代理 API 請求到 `giftlink-backend`
          app.use("/api", createProxyMiddleware({
            target: BACKEND_URL,
            changeOrigin: true,
            secure: true, // 強制 HTTPS
          }));

          // 提供 React 靜態檔案
          app.use(express.static(path.join(__dirname, "build")));

          // 讓 React 處理所有路由
          app.get("*", function (req, res) {
            res.sendFile(path.join(__dirname, "build", "index.html"));
          });

          // 啟動伺服器
          app.listen(PORT, () => {
            console.log(\`✅ giftwebsite running on port \${PORT}\`);
            console.log(\`✅ Proxying API requests to: \${BACKEND_URL}\`);
          });
          EOF



      - name: 🛠️ 建立 `giftwebsite/Dockerfile`
        run: |
          cat <<EOF > giftwebsite/Dockerfile
          # 1️⃣ 建置 React 前端
          FROM node:18-alpine AS build
          WORKDIR /usr/src/app
          COPY package.json package-lock.json ./
          RUN npm install --production
          COPY . .
          
          # 2️⃣ 運行 Express 伺服器，代理 API
          FROM node:18-alpine
          WORKDIR /app
          
          # 複製必要檔案
          COPY --from=build /usr/src/app/package.json .
          COPY --from=build /usr/src/app/node_modules ./node_modules
          COPY --from=build /usr/src/app/build ./build
          COPY --from=build /usr/src/app/server.js .
          
          # 設定環境變數
          ARG BACKEND_URL
          ENV BACKEND_URL=${BACKEND_URL}
          ENV PORT=9000
          
          # 開放應用端口
          EXPOSE 9000
          
          # 啟動應用
          CMD ["node", "server.js"]
          EOF

      - name: 🏗️ 建立 `giftwebsite` Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t 253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest \
            --build-arg BACKEND_URL=${{ env.BACKEND_URL }} \
            --push ./giftwebsite

      - name: 🚀 部署 `giftwebsite` 到 AWS App Runner
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ "$SERVICE_ARN" == "None" ] || [ -z "$SERVICE_ARN" ]; then
              echo "🔄 創建 App Runner 服務..."
              aws apprunner create-service \
                --service-name giftwebsite \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"9000\",
                      \"RuntimeEnvironmentVariables\": {
                        \"BACKEND_URL\": \"${{ env.BACKEND_URL }}\"
                      }
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          else
              echo "🔄 更新 App Runner 服務..."
              aws apprunner update-service \
                --service-arn "$SERVICE_ARN" \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"9000\",
                      \"RuntimeEnvironmentVariables\": {
                        \"BACKEND_URL\": \"${{ env.BACKEND_URL }}\"
                      }
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          fi


      - name: 🔎 獲取 `giftwebsite` 部署網址
        run: |
          export REGION=${{ secrets.AWS_REGION }}
          GIFTWEBSITE_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region $REGION)

          if [ -z "$GIFTWEBSITE_URL" ] || [ "$GIFTWEBSITE_URL" == "None" ]; then
              echo "❌ 無法取得 GIFTWEBSITE_URL，部署中止"
              exit 1
          fi

          echo "✅ GIFTWEBSITE_URL: https://$GIFTWEBSITE_URL"
          echo "GIFTWEBSITE_URL=https://$GIFTWEBSITE_URL" >> $GITHUB_ENV
