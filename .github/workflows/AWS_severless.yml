name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔧 更新 util/import-mongo/.env
        run: |
          cat <<EOF > giftlink-backend/util/import-mongo/.env
          DYNAMODB_TABLE=giftapp-data
          DATASRC=gifts.json
          EOF
      - name: 🔧 確保 .env 設置 DYNAMODB_TABLE
        run: |
          cat <<EOF > giftlink-backend/.env
          DYNAMODB_TABLE=giftapp-data
          JWT_SECRET=mysecret
          EOF
          
      - name: 🔄 輸出 .env 來確認設定
        run: cat giftlink-backend/.env

      - name: 🔧 修正 index.js 確保 .env 正確載入
        run: |
          cat <<EOF > giftlink-backend/util/import-mongo/index.js
          require("dotenv").config({ path: "giftlink-backend/util/import-mongo/.env" });
          const fs = require("fs");
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, PutCommand } = require("@aws-sdk/lib-dynamodb");

          const TABLE_NAME = process.env.DYNAMODB_TABLE;
          if (!TABLE_NAME) {
              console.error("❌ DYNAMODB_TABLE 未設置，請確認 .env");
              process.exit(1);
          }

          const client = new DynamoDBClient({ region: process.env.AWS_REGION });
          const dynamoDB = DynamoDBDocumentClient.from(client);

          async function loadData() {
              console.log("📥 讀取 gifts.json...");
              const giftsFilePath = "giftlink-backend/util/import-mongo/gifts.json";
              const giftsData = JSON.parse(fs.readFileSync(giftsFilePath, "utf8")).docs;

              console.log("🚀 開始寫入 DynamoDB...");
              for (const gift of giftsData) {
                  await dynamoDB.send(new PutCommand({ TableName: TABLE_NAME, Item: gift }));
                  console.log(\✅ 已寫入: \${gift.name}\);
              }
              console.log("✅ gifts.json 數據已成功導入 DynamoDB！");
          }

          loadData().catch(console.error);
          EOF



      - name: 🔧 更新 models/db.js
        run: |
          cat <<EOF > giftlink-backend/models/db.js
          require("dotenv").config();
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");
          
          const client = new DynamoDBClient({
              region: process.env.AWS_REGION,
              credentials: {
                  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
                  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
              },
          });
          
          const db = DynamoDBDocumentClient.from(client);
          const TABLE_NAME = process.env.DYNAMODB_TABLE;
          
          async function getGifts() {
              const params = new ScanCommand({ TableName: TABLE_NAME });
              const data = await db.send(params);
              return data.Items;
          }
          
          async function addGift(gift) {
              const params = new PutCommand({ TableName: TABLE_NAME, Item: gift });
              await db.send(params);
              return gift;
          }
          
          module.exports = { getGifts, addGift };
          EOF


      - name: 🔧 更新 .env，移除 MongoDB 並添加 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/.env
          DYNAMODB_TABLE=giftapp-data
          AWS_REGION=${{ secrets.AWS_REGION }}
          JWT_SECRET=mysecret
          EOF

     
      - name: 🔧 更新 app.js 來支援 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/app.js
          const express = require("express");
          const cors = require("cors");
          const { getGifts, addGift } = require("./models/db");
          
          const app = express();
          app.use(cors());
          app.use(express.json());
          
          const port = process.env.PORT || 3060;
          
          // 確保 API 正常運行
          app.get("/", (req, res) => {
            res.send("Inside the server - Now using DynamoDB!");
          });
          
          // 讀取 DynamoDB 中的禮物數據
          app.get("/api/gifts", async (req, res) => {
            try {
              const gifts = await getGifts();
              res.json(gifts);
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });
          
          // 新增禮物到 DynamoDB
          app.post("/api/gifts", async (req, res) => {
            try {
              const newGift = req.body;
              await addGift(newGift);
              res.json({ message: "Gift added!", gift: newGift });
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });
          
          app.listen(port, "0.0.0.0", () => {
            console.log("✅ Server running on port", port);
            console.log("✅ Using AWS DynamoDB Table:", process.env.DYNAMODB_TABLE);
          });
          EOF

      - name: 📦 安裝 AWS SDK v3 & dotenv
        run: |
          cd giftlink-backend
          npm uninstall aws-sdk
          npm install @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb dotenv
          cd ..

      - name: ✅ 確保 AWS DynamoDB Table 存在
        run: |
          TABLE_NAME="giftapp-data"
          EXISTING_TABLE=$(aws dynamodb list-tables --query "TableNames" --output json | grep -w "$TABLE_NAME" || echo "")

          if [ -z "$EXISTING_TABLE" ]; then
            echo "🔄 創建 DynamoDB Table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ secrets.AWS_REGION }}
            echo "✅ DynamoDB Table 創建成功！"
          else
            echo "✅ DynamoDB Table $TABLE_NAME 已存在"
          fi
      - name: 🔄 確保環境變數載入
        run: |
          set -a  # 讓 export 變數自動適用
          source giftlink-backend/util/import-mongo/.env
          set +a

      - name: 🔄 透過 Node.js index.js 將 gifts.json 存入 DynamoDB
        run: |
          node giftlink-backend/util/import-mongo/index.js

      - name: 🔐 登录 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com  
          
      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t 253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest \
            --push ./giftlink-backend
            
      - name: ⏹️ 檢查並更新或創建 giftapp-backend 的 App Runner 服務
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
          
          if [ -z "$SERVICE_ARN" ]; then
            STATUS="NOT_FOUND"
          else
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
          fi

          echo "🔍 App Runner 目前狀態: $STATUS"

          
          # 如果狀態為 OPERATION_IN_PROGRESS，就等到它完成
          if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
            echo "⚠️ App Runner 正在運行，等待完成..."
            while [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; do
              sleep 10
              STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
            done
          fi
          if [ "$STATUS" != "RUNNING" ]; then
              echo "🛑 停止 App Runner 服務..."
              aws apprunner delete-service --service-arn "$SERVICE_ARN" --region ${{ secrets.AWS_REGION }}
          fi
          STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})

          
          # 如果 App Runner 服務存在，則更新它
          if [ "$STATUS" == "RUNNING" ]; then
            echo "🔄 更新 App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$SERVICE_ARN" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest\",
                  \"ImageRepositoryType\": \"ECR\",
                  \"ImageConfiguration\": {
                    \"Port\": \"3060\",
                    \"RuntimeEnvironmentVariables\": {
                      \"DYNAMODB_TABLE\": \"giftapp-data\",
                      \"AWS_REGION\": \"${{ secrets.AWS_REGION }}\",
                      \"AWS_ACCESS_KEY_ID\": \"${{ secrets.AWS_ACCESS_KEY_ID }}\",
                      \"AWS_SECRET_ACCESS_KEY\": \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"
                    }
                  }
                },
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                }
              }" \
              --region ${{ secrets.AWS_REGION }}
          
          # 如果 App Runner 服務 **不存在或已刪除**，則創建新的
          else
            echo "🚀 創建新的 App Runner 服務..."
            aws apprunner create-service \
              --service-name giftapp-backend \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftapp-backend:latest\",
                  \"ImageRepositoryType\": \"ECR\",
                  \"ImageConfiguration\": {
                    \"Port\": \"3060\",
                    \"RuntimeEnvironmentVariables\": {
                      \"DYNAMODB_TABLE\": \"giftapp-data\",
                      \"AWS_REGION\": \"${{ secrets.AWS_REGION }}\",
                      \"AWS_ACCESS_KEY_ID\": \"${{ secrets.AWS_ACCESS_KEY_ID }}\",
                      \"AWS_SECRET_ACCESS_KEY\": \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"
                    }
                  }
                },
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                }
              }" \
              --region ${{ secrets.AWS_REGION }}
          fi
          
      - name: 🔧 更新 giftlink-frontend/src/config.js
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})
          
          if [ -z "$BACKEND_URL" ] || [ "$BACKEND_URL" == "None" ]; then
              echo "❌ 無法取得 Backend URL，部署中止"
              exit 1
          fi
          echo "🔍 取得的 Backend URL: https://$BACKEND_URL/"
          echo "REACT_APP_BACKEND_URL=https://$BACKEND_URL/" > giftlink-frontend/.env
          cat giftlink-frontend/.env  # 確保內容更新
          
          cat <<EOF > giftlink-frontend/src/config.js
          const config = {
            backendUrl: "https://$BACKEND_URL/",
          };
          console.log("🔍 backendUrl in config.js:", config.backendUrl);
          export { config as urlConfig };
          EOF
          cat giftlink-frontend/src/config.js  # 確保內容正確

      - name: 🔍 查看 .env 檔案內容 (完整顯示)
        run: |
          cd giftlink-frontend
          npm install
          npm run build
          cd ..

      - name: 📝 生成 giftlink-frontend 的 Dockerfile
        run: |
          cat <<EOF > giftlink-frontend/Dockerfile
          # 1. 使用 Node.js 建立 React 前端應用
          FROM node:18-alpine AS build
          WORKDIR /app
          COPY package.json package-lock.json ./
          RUN npm install
          COPY . .
          RUN npm run build

          # 2. 使用 Nginx 作為靜態網站伺服器
          FROM nginx:alpine
          WORKDIR /usr/share/nginx/html
          RUN rm -rf ./*
          COPY --from=build /app/build .
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

          echo "✅ Dockerfile 已成功建立！"
          cat giftlink-frontend/Dockerfile
          
      - name: 🏗️ 建立 giftlink-frontend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t 253490795451.dkr.ecr.us-east-1.amazonaws.com/giftlink-frontend:latest \
            --push ./giftlink-frontend
            
      - name: 🚀 部署 giftlink-frontend 到 AWS App Runner
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftlink-frontend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
          echo "🔍 取得的 SERVICE_ARN: $SERVICE_ARN"

          if [ "$SERVICE_ARN" == "None" ] || [ -z "$SERVICE_ARN" ]; then
              echo "🔄 創建 App Runner 服務..."
              aws apprunner create-service \
                --service-name giftlink-frontend \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftlink-frontend:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"80\"
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          else
              echo "🔄 更新 App Runner 服務..."
              aws apprunner update-service \
                --service-arn "$SERVICE_ARN" \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftlink-frontend:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"80\"
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          fi


      - name: 📦 安裝express and cors in giftwebsite
        run: |
          cd ./giftwebsite
          npm install express cors
          cd ..
          
      - name: 🛠️ 建立 giftwebsite/Dockerfile
        run: |
          cat <<EOF > giftwebsite/Dockerfile
          # 1️⃣ 建置 React 前端
          FROM node:18-alpine AS build
          WORKDIR /app
          COPY package.json package-lock.json ./
          RUN npm install
          COPY . .
          RUN npm run build

          # 2️⃣ 運行 Express 伺服器
          FROM node:18-alpine
          WORKDIR /app
          COPY --from=build /app/package.json .
          COPY --from=build /app/node_modules ./node_modules
          COPY --from=build /app/build ./build
          COPY --from=build /app/server.js .
          ENV PORT=9000
          EXPOSE 9000
          CMD ["node", "server.js"]
          EOF

      - name: 🛠️ 建立 giftwebsite/server.js
        run: |
          cat <<EOF > giftwebsite/server.js
          const express = require("express");
          const path = require("path");
          const cors = require("cors");

          const app = express();
          const PORT = process.env.PORT || 9000;

          // 啟用 CORS
          app.use(cors());

          // 提供 React 靜態檔案
          app.use(express.static(path.join(__dirname, "build")));

          // 讓 React 處理所有路由
          app.get("*", (req, res) => {
            res.sendFile(path.join(__dirname, "build", "index.html"));
          });

          // 啟動伺服器
          app.listen(PORT, () => {
            console.log(\✅ giftwebsite running on port \${PORT}\);
          });
          EOF

      - name: 🏗️ 建立 giftwebsite Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t 253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest \
            --push ./giftwebsite

      - name: 🚀 部署 giftwebsite 到 AWS App Runner
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
          echo "🔍 取得的 SERVICE_ARN: $SERVICE_ARN"

          if [ "$SERVICE_ARN" == "None" ] || [ -z "$SERVICE_ARN" ]; then
              echo "🔄 創建 App Runner 服務..."
              aws apprunner create-service \
                --service-name giftwebsite \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"9000\"
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          else
              echo "🔄 更新 App Runner 服務..."
              aws apprunner update-service \
                --service-arn "$SERVICE_ARN" \
                --source-configuration "{
                  \"ImageRepository\": {
                    \"ImageIdentifier\": \"253490795451.dkr.ecr.us-east-1.amazonaws.com/giftwebsite:latest\",
                    \"ImageRepositoryType\": \"ECR\",
                    \"ImageConfiguration\": {
                      \"Port\": \"9000\"
                    }
                  },
                  \"AuthenticationConfiguration\": {
                    \"AccessRoleArn\": \"arn:aws:iam::253490795451:role/AppRunnerECRAccess\"
                  }
                }" \
                --region ${{ secrets.AWS_REGION }}
          fi

      - name: 🔎 獲取 giftwebsite 部署網址
        run: |
          export REGION=${{ secrets.AWS_REGION }}
          GIFTWEBSITE_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region $REGION)

          if [ -z "$GIFTWEBSITE_URL" ] || [ "$GIFTWEBSITE_URL" == "None" ]; then
              echo "❌ 無法取得 GIFTWEBSITE_URL，部署中止"
              exit 1
          fi

          echo "✅ GIFTWEBSITE_URL: https://$GIFTWEBSITE_URL"
          echo "GIFTWEBSITE_URL=https://$GIFTWEBSITE_URL" >> $GITHUB_ENV
