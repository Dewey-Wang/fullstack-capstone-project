name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 📦 安裝 AWS SDK & dotenv（確保 Backend 依賴）
        run: |
          cd giftlink-backend
          npm install aws-sdk dotenv
          cd ..

      - name: 🔧 自動修改 `db.js` 來支援 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/models/db.js
          const AWS = require("aws-sdk");
          const dotenv = require("dotenv");

          dotenv.config();

          const databaseType = process.env.DATABASE_TYPE || "MONGODB";

          if (databaseType === "DYNAMODB") {
            console.log("Using AWS DynamoDB...");
            AWS.config.update({ region: "us-east-1" });

            const dynamoDB = new AWS.DynamoDB.DocumentClient();
            const TABLE_NAME = process.env.DYNAMODB_TABLE || "giftapp-data";

            const db = {
              getGifts: async () => {
                const params = { TableName: TABLE_NAME };
                const data = await dynamoDB.scan(params).promise();
                return data.Items;
              },
              addGift: async (gift) => {
                const params = { TableName: TABLE_NAME, Item: gift };
                await dynamoDB.put(params).promise();
                return gift;
              }
            };

            module.exports = db;
          } else {
            console.log("Using MongoDB...");
            const mongoose = require("mongoose");
            const mongoUri = process.env.MONGO_URL || "mongodb://localhost:27017";

            mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true });
            const db = mongoose.connection;
            db.on("error", console.error.bind(console, "MongoDB connection error:"));
            db.once("open", () => { console.log("Connected to MongoDB"); });

            module.exports = mongoose;
          }
          EOF

      - name: 🔧 自動修改 `app.js` 來適配 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/app.js
          const express = require("express");
          const db = require("./models/db");

          const app = express();
          app.use(express.json());

          app.get("/api/gifts", async (req, res) => {
            try {
              const gifts = await db.getGifts();
              res.json(gifts);
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          app.post("/api/gifts", async (req, res) => {
            try {
              const newGift = req.body;
              await db.addGift(newGift);
              res.json({ message: "Gift added!", gift: newGift });
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          const PORT = process.env.PORT || 3060;
          app.listen(PORT, "0.0.0.0", () => {
            console.log(\`Server running on port \${PORT}\`);
          });
          EOF

      - name: ✅ 檢查並建立 AWS DynamoDB Table
        run: |
          TABLE_NAME="giftapp-data"
          EXISTING_TABLE=$(aws dynamodb list-tables --query "TableNames" --output json | grep -w "$TABLE_NAME" || echo "")

          if [ -z "$EXISTING_TABLE" ]; then
            echo "🔄 創建 DynamoDB Table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ secrets.AWS_REGION }}
            echo "✅ DynamoDB Table 創建成功！"
          else
            echo "✅ DynamoDB Table $TABLE_NAME 已存在，跳過創建"
          fi
      - name: 🔐 登入 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: 🏗️ 檢查並建立 AWS ECR 儲存庫（避免不存在）
        run: |
          REPO_NAME="giftapp-backend"
          EXISTING_REPO=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --region ${{ secrets.AWS_REGION }} 2>&1 || echo "MISSING")

          if [[ "$EXISTING_REPO" == *"MISSING"* ]]; then
            echo "🚀 AWS ECR 儲存庫 $REPO_NAME 不存在，創建中..."
            aws ecr create-repository --repository-name "$REPO_NAME" --region ${{ secrets.AWS_REGION }}
            echo "✅ AWS ECR 儲存庫 $REPO_NAME 已創建"
          else
            echo "✅ AWS ECR 儲存庫 $REPO_NAME 已存在"
          fi

      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest \
            --push ./giftlink-backend

      - name: 🚀 部署 Backend 到 AWS App Runner
        run: |
          BACKEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$BACKEND_ARN" ]; then
            echo "🔄 創建 Backend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftapp-backend \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060",
                    "RuntimeEnvironmentVariables": {
                      "DYNAMODB_TABLE": "GiftAppTable",
                      "AWS_REGION": "${{ secrets.AWS_REGION }}",
                      "JWT_SECRET": "mysecret"
                    }
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 檢查 Backend App Runner 服務狀態..."

            for i in {1..30}; do
              STATUS=$(aws apprunner describe-service --service-arn "$BACKEND_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
              if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
                echo "⌛ 目前狀態: $STATUS，等待 10 秒..."
                sleep 10
              else
                break
              fi
            done

            STATUS=$(aws apprunner describe-service --service-arn "$BACKEND_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
            if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "❌ Backend 仍在 OPERATION_IN_PROGRESS，無法更新！請稍後重試。"
              exit 1
            fi

            echo "🔄 更新 Backend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$BACKEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060",
                    "RuntimeEnvironmentVariables": {
                      "DYNAMODB_TABLE": "GiftAppTable",
                      "AWS_REGION": "${{ secrets.AWS_REGION }}",
                      "JWT_SECRET": "mysecret"
                    }
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi
      - name: 🚀 檢查 backend 到 AWS App Runner
        run: |
          aws apprunner describe-service --service-arn $(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }}) --region ${{ secrets.AWS_REGION }} --query "Service.Status"
          docker run -p 3060:3060 ${{ secrets.ECR_REPO }}/giftapp-backend:latest


      - name: 🚀 部署 Frontend 到 AWS App Runner
        run: |
          FRONTEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$FRONTEND_ARN" ]; then
            echo "🔄 創建 Frontend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftwebsite \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 更新 Frontend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$FRONTEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: 取得應用程式網址
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})
          FRONTEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})

          echo "✅ Backend URL: $BACKEND_URL"
          echo "✅ Frontend URL: $FRONTEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 README.md 顯示網站網址
        run: |
          echo "# 🎁 GiftWebsite" > README.md
          echo "" >> README.md
          echo "✅ 你的網站已部署 🎉" >> README.md
          echo "" >> README.md
          echo '🔗 <a href="https://'$FRONTEND_URL'" target="_blank">**訪問 GiftWebsite**</a>' >> README.md
          echo "" >> README.md
          echo "🚀 每次 Push 到 main 都會自動部署到 AWS App Runner！" >> README.md
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "更新 README.md，顯示最新的部署網址"
          git push
