name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # **🔴 确保 `App Runner` 不会卡住**
      - name: ⏹️ 停止已有的 App Runner 服務 (避免 OPERATION_IN_PROGRESS)
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
          
          if [ ! -z "$SERVICE_ARN" ]; then
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
            
            if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "⚠️ `App Runner` 正在運行，等待完成..."
              while [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; do
                STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
              done
            fi
            
            if [ "$STATUS" != "DELETED" ]; then
              echo "🛑 停止 App Runner 服務..."
              aws apprunner delete-service --service-arn "$SERVICE_ARN" --region ${{ secrets.AWS_REGION }}
            fi
          fi

      - name: 📦 安裝 AWS SDK v3 & dotenv
        run: |
          cd giftlink-backend
          npm uninstall aws-sdk
          npm install @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb dotenv
          cd ..

      - name: 🔧 更新 `db.js` 來使用 AWS SDK v3
        run: |
          cat <<EOF > giftlink-backend/models/db.js
          require("dotenv").config();
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");

          const client = new DynamoDBClient({ region: process.env.AWS_REGION || "us-east-1" });
          const dynamoDB = DynamoDBDocumentClient.from(client);
          const TABLE_NAME = process.env.DYNAMODB_TABLE || "giftapp-data";

          const db = {
            getGifts: async () => {
              const params = new ScanCommand({ TableName: TABLE_NAME });
              const data = await dynamoDB.send(params);
              return data.Items;
            },
            addGift: async (gift) => {
              const params = new PutCommand({ TableName: TABLE_NAME, Item: gift });
              await dynamoDB.send(params);
              return gift;
            }
          };

          module.exports = db;
          EOF
      - name: 🔧 更新 `app.js` 來支援 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/app.js
          const express = require("express");
          const cors = require("cors");
          const db = require("./models/db");

          const app = express();
          app.use("*", cors());
          app.use(express.json());

          const port = process.env.PORT || 3060;

          // 確保 API 正常運行
          app.get("/", (req, res) => {
            res.send("Inside the server");
          });

          // 確保可以讀取與寫入 DynamoDB
          app.get("/api/gifts", async (req, res) => {
            try {
              const gifts = await db.getGifts();
              res.json(gifts);
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          app.post("/api/gifts", async (req, res) => {
            try {
              const newGift = req.body;
              await db.addGift(newGift);
              res.json({ message: "Gift added!", gift: newGift });
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          app.listen(port, "0.0.0.0", () => {
            console.log(`Server running on port ${port}`);
            console.log(`DynamoDB Table: ${TABLE_NAME}`);
            console.log(`AWS Region: ${process.env.AWS_REGION}`);
          });
          EOF

      - name: ✅ 確保 AWS DynamoDB Table 存在
        run: |
          TABLE_NAME="giftapp-data"
          EXISTING_TABLE=$(aws dynamodb list-tables --query "TableNames" --output json | grep -w "$TABLE_NAME" || echo "")

          if [ -z "$EXISTING_TABLE" ]; then
            echo "🔄 創建 DynamoDB Table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ secrets.AWS_REGION }}
            echo "✅ DynamoDB Table 創建成功！"
          else
            echo "✅ DynamoDB Table $TABLE_NAME 已存在"
          fi

      - name: 🔐 確保 IAM Role 有權限
        run: |
          aws iam put-role-policy \
            --role-name AppRunnerECRAccess \
            --policy-name AppRunnerDynamoDBPolicy \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:DescribeTable",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "arn:aws:dynamodb:${{ secrets.AWS_REGION }}:253490795451:table/giftapp-data"
                }
              ]
            }'
            
      - name: 🔐 登录 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      - name: 🔍 确保 AppRunnerECRAccess 绑定了 ECR 访问权限
        run: |
          aws iam list-attached-role-policies --role-name AppRunnerECRAccess
          aws ecr set-repository-policy \
            --repository-name giftapp-backend \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "apprunner.amazonaws.com"
                  },
                  "Action": [
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken"
                  ]
                }
              ]
            }' \
            --region us-east-1
          

      - name: 🔍 检查 GitHub Actions 运行的 IAM 账号
        run: |
          aws sts get-caller-identity
          aws ecr get-repository-policy --repository-name giftapp-backend --region us-east-1


      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest \
            --push ./giftlink-backend

      - name: 🚀 創建或更新 App Runner 服務
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$SERVICE_ARN" ]; then
            echo "🚀 創建新的 App Runner 服務..."
            aws apprunner create-service \
              --service-name giftapp-backend \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060",
                    "RuntimeEnvironmentVariables": {
                      "DYNAMODB_TABLE": "giftapp-data",
                      "AWS_REGION": "${{ secrets.AWS_REGION }}",
                      "JWT_SECRET": "mysecret"
                    }
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 更新 App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$SERVICE_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060"
                  }
                }
              }' \
              --AuthenticationConfiguration '{
                "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: 🚀 部署 Frontend 到 AWS App Runner
        run: |
          FRONTEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$FRONTEND_ARN" ]; then
            echo "🔄 創建 Frontend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftwebsite \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 更新 Frontend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$FRONTEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: 取得應用程式網址
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})
          FRONTEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})

          echo "✅ Backend URL: $BACKEND_URL"
          echo "✅ Frontend URL: $FRONTEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 README.md 顯示網站網址
        run: |
          echo "# 🎁 GiftWebsite" > README.md
          echo "" >> README.md
          echo "✅ 你的網站已部署 🎉" >> README.md
          echo "" >> README.md
          echo '🔗 <a href="https://'$FRONTEND_URL'" target="_blank">**訪問 GiftWebsite**</a>' >> README.md
          echo "" >> README.md
          echo "🚀 每次 Push 到 main 都會自動部署到 AWS App Runner！" >> README.md
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "更新 README.md，顯示最新的部署網址"
          git push
