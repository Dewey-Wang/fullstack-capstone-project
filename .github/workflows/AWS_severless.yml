name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 登入 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      # ✅ 2️⃣ 確保 AWS DynamoDB Table 存在
      - name: 🔍 檢查或建立 DynamoDB Table
        run: |
          TABLE_NAME="giftapp-data"
          TABLE_EXISTS=$(aws dynamodb list-tables --query "TableNames" --output json | jq -r --arg TABLE_NAME "$TABLE_NAME" 'contains([$TABLE_NAME])')

          if [ "$TABLE_EXISTS" != "true" ]; then
            echo "🚀 創建 DynamoDB Table: $TABLE_NAME..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region ${{ secrets.AWS_REGION }}
            echo "✅ DynamoDB Table 創建成功！"
          else
            echo "✅ DynamoDB Table 已存在，跳過創建"
          fi

      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest --push ./giftlink-backend

      - name: 🏗️ 建立 Frontend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftwebsite:latest --push ./giftwebsite

      - name: 🚀 部署 Backend 到 AWS App Runner
        run: |
          BACKEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$BACKEND_ARN" ]; then
            echo "🔄 創建 Backend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftapp-backend \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }} \
              --instance-configuration '{
                "EnvironmentVariables": [
                  {"Name": "DATABASE_TYPE", "Value": "DYNAMODB"},
                  {"Name": "DYNAMODB_TABLE", "Value": "giftapp-data"},
                  {"Name": "JWT_SECRET", "Value": "mysecret"}
                ]
              }'
          else
            echo "🔄 更新 Backend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$BACKEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "3060"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }} \
              --instance-configuration '{
                "EnvironmentVariables": [
                  {"Name": "DATABASE_TYPE", "Value": "DYNAMODB"},
                  {"Name": "DYNAMODB_TABLE", "Value": "giftapp-data"},
                  {"Name": "JWT_SECRET", "Value": "mysecret"}
                ]
              }'
          fi

      - name: 🚀 部署 Frontend 到 AWS App Runner
        run: |
          FRONTEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$FRONTEND_ARN" ]; then
            echo "🔄 創建 Frontend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftwebsite \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 更新 Frontend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$FRONTEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: 取得應用程式網址
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})
          FRONTEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})

          echo "✅ Backend URL: $BACKEND_URL"
          echo "✅ Frontend URL: $FRONTEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 README.md 顯示網站網址
        run: |
          echo "# 🎁 GiftWebsite" > README.md
          echo "" >> README.md
          echo "✅ 你的網站已部署 🎉" >> README.md
          echo "" >> README.md
          echo '🔗 <a href="https://'$FRONTEND_URL'" target="_blank">**訪問 GiftWebsite**</a>' >> README.md
          echo "" >> README.md
          echo "🚀 每次 Push 到 main 都會自動部署到 AWS App Runner！" >> README.md
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "更新 README.md，顯示最新的部署網址"
          git push
