name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # **🔴 确保 `App Runner` 不会卡住**
      - name: ⏹️ 停止已有的 App Runner 服務 (避免 OPERATION_IN_PROGRESS)
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
          
          if [ ! -z "$SERVICE_ARN" ]; then
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
            
            if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "⚠️ `App Runner` 正在運行，等待完成..."
              while [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; do
                STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
              done
            fi
            
            if [ "$STATUS" != "DELETED" ]; then
              echo "🛑 停止 App Runner 服務..."
              aws apprunner delete-service --service-arn "$SERVICE_ARN" --region ${{ secrets.AWS_REGION }}
            fi
          fi

      - name: 📦 安裝 AWS SDK v3 & dotenv
        run: |
          cd giftlink-backend
          npm uninstall aws-sdk
          npm install @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb dotenv
          cd ..
     
      - name: 🔧 更新 `.env`，移除 MongoDB 並添加 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/.env
          DYNAMODB_TABLE=giftapp-data
          AWS_REGION=${{ secrets.AWS_REGION }}
          JWT_SECRET=mysecret
          EOF
          
      - name: 🔧 更新 `Dockerfile`
        run: |
          cat <<EOF > giftlink-backend/Dockerfile
          FROM node:18.12.1-bullseye-slim

          WORKDIR /usr/src/app

          COPY package*.json ./

          RUN npm install

          COPY . .

          # 確保目錄存在
          RUN mkdir -p /usr/src/app/util/import-mongo
          
          # **COPY gifts.json**
          COPY util/import-mongo/gifts.json /usr/src/app/util/import-mongo/gifts.json
          
          # 確保複製成功
          RUN ls -al /usr/src/app/util/import-mongo/

          EXPOSE 3060

          CMD ["node", "app.js"]
          EOF
      
      - name: 📂 確認 GitHub Actions 內部路徑
        run: |
          pwd
          ls -al
          ls -al giftlink-backend/util/import-mongo/

      - name: 🔧 修正 `db.js` 讀取 `gifts.json`
        run: |
          ls -al giftlink-backend/util/import-mongo/
          cat giftlink-backend/util/import-mongo/gifts.json
      - name: 🔧 修正 `db.js` 讀取 `gifts.json`
        run: |
          cat <<EOF > giftlink-backend/models/db.js
          require("dotenv").config();
          const fs = require("fs");
          const path = require("path");
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");
          
          const client = new DynamoDBClient({ region: process.env.AWS_REGION || "us-east-1" });
          const dynamoDB = DynamoDBDocumentClient.from(client);
          const TABLE_NAME = process.env.DYNAMODB_TABLE || "giftapp-data";
          
          // **修正 `gifts.json` 路徑**
          const giftsFilePath = path.join(__dirname, "../util/import-mongo/gifts.json");
          
          console.log(`🔍 嘗試讀取 gifts.json: ${giftsFilePath}`);
          
          if (!fs.existsSync(giftsFilePath)) {
            console.error(`❌ 找不到 gifts.json: ${giftsFilePath}`);
            process.exit(1);
          }
          
          // **讀取 `gifts.json`**
          const giftsData = JSON.parse(fs.readFileSync(giftsFilePath, "utf8")).docs;
          
          const db = {
            getGifts: async () => {
              const params = new ScanCommand({ TableName: TABLE_NAME });
              const data = await dynamoDB.send(params);
              return data.Items;
            },
            addGift: async (gift) => {
              const params = new PutCommand({ TableName: TABLE_NAME, Item: gift });
              await dynamoDB.send(params);
              return gift;
            },
            initializeData: async () => {
              const existingGifts = await db.getGifts();
              if (existingGifts.length === 0) {
                console.log("🔄 正在導入 `gifts.json` 到 DynamoDB...");
                for (const gift of giftsData) {
                  await db.addGift(gift);
                }
                console.log("✅ `gifts.json` 數據已成功導入！");
              } else {
                console.log("✅ `gifts.json` 已存在於 DynamoDB，跳過導入！");
              }
            }
          };
          module.exports = db;
          EOF


     
      - name: 🔧 更新 `app.js` 來支援 DynamoDB
        run: |
          cat <<EOF > giftlink-backend/app.js
          const express = require("express");
          const cors = require("cors");
          const db = require("./models/db");

          const app = express();
          app.use("*", cors());
          app.use(express.json());

          const port = process.env.PORT || 3060;

          // 確保 API 正常運行
          app.get("/", (req, res) => {
            res.send("Inside the server - Now using DynamoDB!");
          });

          // 確保可以讀取與寫入 DynamoDB
          app.get("/api/gifts", async (req, res) => {
            try {
              const gifts = await db.getGifts();
              res.json(gifts);
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          app.post("/api/gifts", async (req, res) => {
            try {
              const newGift = req.body;
              await db.addGift(newGift);
              res.json({ message: "Gift added!", gift: newGift });
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          });

          app.listen(port, "0.0.0.0", () => {
            console.log("✅ Server running on port", port);
            console.log("✅ Using AWS DynamoDB Table:", process.env.DYNAMODB_TABLE);
          });
          EOF
