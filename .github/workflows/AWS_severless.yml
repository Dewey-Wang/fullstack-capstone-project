name: Completely Deploy to AWS Serverless

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 檢出程式碼
        uses: actions/checkout@v4

      - name: 🔐 設定 AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 登入 AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      # ✅ 檢查 Backend Docker Image 是否存在
      - name: 🔍 檢查 Backend Image 是否存在於 AWS ECR
        run: |
          IMAGE_COUNT=$(aws ecr list-images --repository-name giftapp-backend --region ${{ secrets.AWS_REGION }} --query 'imageIds' | jq length)
          if [ "$IMAGE_COUNT" -eq "0" ]; then
            echo "❌ Backend Image 不存在，請先 Build 並 Push！"
            exit 1
          else
            echo "✅ Backend Image 存在，繼續部署..."
          fi

      # ✅ 檢查 App Runner 是否有正確的 IAM 權限
      - name: 🔍 檢查 App Runner IAM 角色
        run: |
          ROLE_EXISTS=$(aws iam get-role --role-name AppRunnerECRAccess --query "Role.RoleName" --output text || echo "MISSING")
          if [ "$ROLE_EXISTS" == "MISSING" ]; then
            echo "❌ IAM 角色 AppRunnerECRAccess 不存在，請手動建立！"
            exit 1
          else
            echo "✅ IAM 角色 AppRunnerECRAccess 存在"
          fi

      - name: 🏗️ 建立 Backend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftapp-backend:latest --push ./giftlink-backend

      - name: 🏗️ 建立 Frontend Docker Image 並推送到 AWS ECR
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REPO }}/giftwebsite:latest --push ./giftwebsite

     - name: 🚀 部署 Backend 到 AWS App Runner
        run: |
          BACKEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})
      
          if [ -z "$BACKEND_ARN" ]; then
            echo "🔄 創建 Backend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftapp-backend \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "5000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 檢查 Backend App Runner 服務狀態..."
            
            # 🔄 等待 App Runner 完成現有操作，最多等 5 分鐘
            for i in {1..30}; do
              STATUS=$(aws apprunner describe-service --service-arn "$BACKEND_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
              
              if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
                echo "⌛ 目前狀態: $STATUS，等待 10 秒..."
                sleep 10
              else
                break
              fi
            done
      
            # 確保狀態不是 OPERATION_IN_PROGRESS
            STATUS=$(aws apprunner describe-service --service-arn "$BACKEND_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
            if [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "❌ Backend 仍在 OPERATION_IN_PROGRESS，無法更新！請稍後重試。"
              exit 1
            fi
      
            echo "🔄 更新 Backend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$BACKEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftapp-backend:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "5000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      - name: 🚀 部署 Frontend 到 AWS App Runner
        run: |
          FRONTEND_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceArn" --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$FRONTEND_ARN" ]; then
            echo "🔄 創建 Frontend App Runner 服務..."
            aws apprunner create-service \
              --service-name giftwebsite \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "🔄 更新 Frontend App Runner 服務..."
            aws apprunner update-service \
              --service-arn "$FRONTEND_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ secrets.ECR_REPO }}/giftwebsite:latest",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "9000"
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "arn:aws:iam::253490795451:role/AppRunnerECRAccess"
                }
              }' \
              --region ${{ secrets.AWS_REGION }}
          fi

      # ✅ 檢查 Backend 是否成功啟動
      - name: 🔍 確保 Backend 服務正常運行
        run: |
          BACKEND_STATUS=$(aws apprunner describe-service --service-arn "$BACKEND_ARN" --query "Service.Status" --output text --region ${{ secrets.AWS_REGION }})
          if [ "$BACKEND_STATUS" != "RUNNING" ]; then
            echo "❌ Backend App Runner 部署失敗，狀態: $BACKEND_STATUS"
            exit 1
          else
            echo "✅ Backend 服務正在運行"
          fi

      - name: 取得應用程式網址
        run: |
          BACKEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftapp-backend'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})
          FRONTEND_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='giftwebsite'].ServiceUrl" --output text --region ${{ secrets.AWS_REGION }})

          echo "✅ Backend URL: $BACKEND_URL"
          echo "✅ Frontend URL: $FRONTEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

      - name: 📝 更新 README.md 顯示網站網址
        run: |
          echo "# 🎁 GiftWebsite" > README.md
          echo "" >> README.md
          echo "✅ 你的網站已部署 🎉" >> README.md
          echo "" >> README.md
          echo '🔗 <a href="https://'$FRONTEND_URL'" target="_blank">**訪問 GiftWebsite**</a>' >> README.md
          echo "" >> README.md
          echo "🚀 每次 Push 到 main 都會自動部署到 AWS App Runner！" >> README.md
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "更新 README.md，顯示最新的部署網址"
          git push
